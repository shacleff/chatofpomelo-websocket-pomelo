<一>pomelo中的2种connector：

1.sioconnector

优点：
socket.io
超时、握手
json通信格式

缺点：
json带来的通讯冗余数据

2.hybirdconnector

优点：
二进制版本通讯协议
route压缩 和 protobuf压缩 提高宽带利用率，满足移动环境
同时兼容了json格式接口

<二>pomelo中的2种编码

1.message编码过程:

实现route和protobuf压缩

将编码结果传递给package层

message编码层可选，也可以替换成其它二进制编码格式，都不会影响package层的编码和发送

2.package编码过程:

实现pomelo应用基于二进制协议的握手过程，心跳和传输编码

package层的编码结果可以通过tcp、websocket等协议以二进制数据的形式进行传输

<三>package协议
目的：用来封装在面向连接的二进制流的通讯协议(如：tcp)上的pomelo数据包

1.控制包:
实现pomelo应用层面的控制流程，包括客户端和服务器的握手，心跳，和服务器断开连接的通知等控制信息

握手：
提供一个机会，让客户端和服务器建立连接后，进行一些初始化的数据交换，交换的数据分为 系统和用户两部分，系统部分为pomelo框架所需信息，用户部分则是用户可以在具体应用中定义的内容

握手的内容为utf-8编码的json字符串(不压缩)，通过body传输


握手请求：
{
  "sys": {
    "version": "1.1.1",      //客户端sdk固定的版本号，在握手阶段客户端将该版本号上传给服务器，服务器可以由此来判断当前客户端是否合适与服务器通讯
    "type": "js-websocket"   //客户端的类型，可以通过客户端类型和版本号一起来确定客户端是否合适
  }, 
  "user": {
  	// any customized request data
  }
}

握手响应：
{
  "code": 200, 			// 握手响应的状态码：200：成功  500：处理用户自定义握手流程时失败   501：客户端版本号不符合要求
  "sys": {
    "heartbeat": 3, 	// 可选：单位为秒。 没有指定表示不需要心跳
    "dict": {}, 		// 可选：route字段压缩的映射表，没有指定表示没有字典压缩
    "protos": {}		// 可选：protobuf压缩的数据定义，没有表示没有protobuf压缩
  }, 
  "user": {             // 可选：用户自定义我收数据，没有表示没有用户自定义的握手数据
  	
  }
}


2.数据包:
实现 客户端和服务器之间传输应用数据


<四>心跳