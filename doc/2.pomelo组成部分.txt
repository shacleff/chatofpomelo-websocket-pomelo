1)约定优于配置的理解
  handler 接受客户端请求
  remote  接受rpc请求
  导出的模块使用了工厂函数

2)pomelo的优势理解
  理想的游戏服务器架构: 单线程、多进程、可扩展的服务器群

3)服务器分类
  前端服务器:
    gate-->前端负载均衡服务器
    connectors-->接受客户端连接 因此会监听clientPort

  后端服务器:
    其它各种应用服务器

4)组件
  1.master组件

  2.monitor组件

  3.connector组件
    connector最重要的作用之一是承受客户端的连接;
    然后客户端的通信通过调用handler里面的方法，然后filter先过滤;
    然后再通过channel单播或者广播;


  4.session组件
    app.get("sessionService")
    sessionz组件是sessionService的包装组件，用来维护用户的session信息

  5.connection组件

  6.server组件

  7.pushScheduler组件

  8.proxy组件

  9.remote组件

  10.dictionary组件

  11.protobuf组件
    自己写一个根据json动态解析protobuf的demo;

  12.channel组件
    一个channel就是一个用户的集合;
    每个用户大致对应于前端服务器的session;
    用户可以通过channel向一个channel钟所有的用户推送消息;

  13.backendSession组件
    通过远程过程调用完成一些比如对原始session绑定uid等操作

5)rpc原理
  1.路由机制
  2.rpc通信原理依然是socket,pomelo默认是socket.io  也支持原生socket

6)pomelo的2个压缩
  1.基于字典的route路由压缩 useDict:true 配置在 dictionary.json中

  2.基于protobuf的消息内容的压缩 useProtobuf:true
    clientProtos.json
    serverProtos.json
